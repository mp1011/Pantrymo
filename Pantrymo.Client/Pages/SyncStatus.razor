@using MediatR
@using Pantrymo.Domain.Services
@using static Pantrymo.Application.Features.DataSyncFeature
@implements IDisposable
@implements INotificationHandler<SyncStatusChanged>
@inject NotificationDispatcher<SyncStatusChanged> _syncStatusChangedHandler

<h3>Sync Status</h3>

<ol>
    @foreach(var text in Updates)
    {
        <li>@text</li>
    }
</ol>

@code 
{

    protected override void OnInitialized()
    {
        _syncStatusChangedHandler.Register(this);
    }

    public void Dispose()
    {
        _syncStatusChangedHandler.Unregister(this);
    }

    List<string> Updates = new List<string>();

    public async Task Handle(SyncStatusChanged notification, CancellationToken cancellationToken)
    {
        await InvokeAsync(() =>
        {
            Updates.Add($"Sync {notification.ModelType} Success={notification.Status.Succeeded}");
            StateHasChanged();
        });
    }
}
