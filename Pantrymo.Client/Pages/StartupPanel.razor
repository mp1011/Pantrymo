@page "/StartupPanel"

@using MediatR
@using Pantrymo.Application.Features
@using Pantrymo.Client.Pages
@using Pantrymo.Domain.Features
@using Pantrymo.Domain.Services
@using System.Collections.Concurrent

@implements IDisposable
@implements INotificationHandler<ShowProgressFeature.Notification>
@inject NotificationDispatcher<ShowProgressFeature.Notification> _progressUpdateDispatcher
@inject IMediator _mediator;

@if (!Finished)
{
    <div class="card text-primary">
        <div class="card-body">
            <h3>Loading</h3>
            <div class="spinner-border" role="status">
            </div>
            <ul>
                @foreach(var msg in LogMessages)
                {
                    <li>@msg</li>
                }
            </ul>
        </div>
    </div>
}
else
{
    <h3>Ready!</h3>
}

@code 
{
    bool Finished = false;
    ConcurrentQueue<string> LogMessages = new ConcurrentQueue<string>();

    [Parameter] public EventCallback StartupFinished { get; set; }

    protected override async void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            await _mediator.Send(new StartupFeature.Command());

            Finished = true;
            await StartupFinished.InvokeAsync();
            await InvokeAsync(() => StateHasChanged());
        }
    }

    protected override void OnInitialized()
    {        
        _progressUpdateDispatcher.Register(this);
    }

    public void Dispose()
    {
        _progressUpdateDispatcher.Unregister(this);
    }

    public async Task Handle(ShowProgressFeature.Notification notification, CancellationToken cancellationToken)
    {
        await InvokeAsync(() =>
        {
            LogMessages.Enqueue(notification.Message);
            StateHasChanged();
        });
    }





}
